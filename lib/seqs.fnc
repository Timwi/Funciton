                 ╔═══════════════════════════════════════╗
                 ║  lazy Fibonacci                       ║
                 ╟───────────────────────────────────────╢
                 ║  Returns the Fibonacci sequence as    ║
                 ║  an infinite lazy sequence            ║
                 ╟───────────────────────────────────────╢
                 ║  λFibo(_) = λfibo(1, 1)               ║
                 ║  λfibo(a, b) = λ_·(a, λfibo(b, a+b))  ║
                 ╚═══════════════════════════════════════╝
               ╓───────╖                      ╓┬───────╖
               ║ λFibo ║                   ┌──╫┘ λfibo ╟──┐
               ╙───┬───╜  ╔═══╗            │  ╙────────╜  │
                   │  ┌───╢ 1 ╟───┐        │  ┌───╖       │
                   │  │   ╚═══╝   │      ┌─┴──┤ + ╟───────┴───┐
                   │  │ ┌───────╖ │    ╔═╧═╕  ╘═╤═╝ ┌───────╖ │
                   │  └─┤ λfibo ╟─┘  ┌─╢   ├─┬─┐└───┤ λfibo ╟─┘
                   │    ╘═══╤═══╝    │ ╚═╤═╛ └─┘    ╘═══╤═══╝
                   │      ┌─┴─╖  ┌─┐ │   │              │
                   └──────┤ · ╟──┴─┘ └──────────────────┘
                          ╘═╤═╝
                            │

        ╔══════════════════════════╗      ╔══════════════════════════╗
        ║  convert lazy to list    ║      ║  convert list to lazy    ║
        ╟──────────────────────────╢      ╟──────────────────────────╢
        ║  Converts a finite lazy  ║      ║  Converts a list to a    ║
        ║  sequence to a list      ║      ║  lazy sequence           ║
        ╟──────────────────────────╢      ╟──────────────────────────╢
        ║  ⌠(q) =                  ║      ║  ⌡(l) =                  ║
        ║    let (e, r) = q(0);    ║      ║    let (h, t) = ‹(l);    ║
        ║    q ? ›(⌠(r), e) : 0    ║      ║    l ? λ_·(h, ⌡(t)) : 0  ║
        ╚══════════════════════════╝      ╚══════════════════════════╝
                       ╓───╖                                ╓───╖
                       ║ ⌠ ║                     ┌───┐      ║ ⌡ ║
                       ╙─┬─╜                   ┌─┴─╖ └────┐ ╙─┬─╜
              ┌──────────┴───────┐           ┌─┤ ‹ ╟────┐ └───┴─┐
            ┌─┴─╖                │           │ ╘═══╝    │       │
         ┌──┤   ╟──────────────┐ │           │ ┌───╖  ╔═╧═╕     │
         │  └─┬─╜ ┌───╖  ┌───╖ │ │           └─┤ ⌡ ╟──╢   ├─┬─┐ │
         │    └───┤ › ╟──┤ ⌠ ╟─┘ │             ╘═══╝  ╚═╤═╛ └─┘ │
         │        ╘═╤═╝  ╘═══╝   │             ╔═══╗  ┌─┴─╖     │
         │ ╔═══╗  ┌─┴─╖          │             ║ 0 ╟──┤ ? ╟─────┘
         └─╢ 0 ╟──┤ ? ╟──────────┘             ╚═══╝  ╘═╤═╝
           ╚═══╝  ╘═╤═╝
                    │

    ╔═════════════════════════════════╗   ╔═════════════════════════════╗
    ║  map                            ║   ║  filter                     ║
    ╟─────────────────────────────────╢   ╟─────────────────────────────╢
    ║  Returns a new lazy sequence    ║   ║  Filter a lazy sequence by  ║
    ║  that passes every element of   ║   ║  a provided predicate       ║
    ║  the provided sequence through  ║   ╟─────────────────────────────╢
    ║  the provided function          ║   ║  ƒ(q, f) =                  ║
    ╟─────────────────────────────────╢   ║    let (e, r) = q(0);       ║
    ║  ɱ(q, f) =                      ║   ║    let s = ƒ(r, f);         ║
    ║    let (e, r) = q(0);           ║   ║    q ? f(e) ? λ_·(e, s)     ║
    ║    q ? λ_·(f(e), ɱ(r, f)) : 0   ║   ║             : s : 0         ║
    ╚═════════════════════════════════╝   ╚═════════════════════════════╝
           ┌───────────────────────┐                       ╓───╖
           │       ╓───╖           │    ┌──────────────────╢ ƒ ╟──────────┐
           ├───────╢ ɱ ╟────┐      │    │     ┌──────┐     ╙───╜          │
         ┌─┴─╖     ╙───╜    │      │    │   ┌─┴─╖  ┌─┴─╖ ┌───────┐        │
      ┌──┤   ╟───┐      ┌───┴────┐ │    │ ┌─┤   ╟──┤ · ╟─┘   ┌───┴──┐     │
      │  └─┬─╜ ┌─┴─╖  ┌─┴─╖  ┌─┐ │ │    │ │ └─┬─╜  ╘═╤═╝   ╔═╧═╕ ┌┐ │     │
      │    └───┤ · ╟──┤   ╟──┴─┘ │ │    │ │   │    ┌─┴─╖ ┌─╢   ├─┴┘ │     │
      │        ╘═╤═╝  └─┬─╜      │ │    │ │   │    │ ƒ ╟─┤ ╚═╤═╛    │     │
      │        ┌─┴─╖  ╔═╧═╕  ┌─┐ │ │    │ │   │    ╘═╤═╝ │ ┌─┴─╖  ┌─┴─╖   │
      │        │ ɱ ╟──╢   ├──┴─┘ │ │    │ │   │      │   └─┤ ? ╟──┤   ╟─┐ │
      │        ╘═╤═╝  ╚═╤═╛      │ │    └─┤   │      │     ╘═╤═╝  └─┬─╜ ├─┘
      │          │    ┌─┴─╖      │ │      │   │      │     ┌─┴─╖    ├─┐ │
      │          └────┤ · ╟──────┘ │      │   │      └─────┤ · ╟──┐ └─┘ │
      │               ╘═╤═╝        │      │   │            ╘═╤═╝  └─────┘
      │        ╔═══╗  ┌─┴─╖        │      │   │     ╔═══╗  ┌─┴─╖
      └────────╢ 0 ╟──┤ ? ╟────────┘      │   └─────╢ 0 ╟──┤ ? ╟─┐
               ╚═══╝  ╘═╤═╝               │         ╚═══╝  ╘═╤═╝ │
                        │                 └──────────────────────┘

   ╔═══════════════════════════════╗
   ║  truncate                     ║    ╔═══════════════════════════════╗
   ╟───────────────────────────────╢    ║  skip                         ║
   ║  Truncates a lazy sequence    ║    ╟───────────────────────────────╢
   ║  after at most n elements     ║    ║  Removes the first n items    ║
   ╟───────────────────────────────╢    ║  from a lazy sequence         ║
   ║  ȶ(q, n) =                    ║    ╟───────────────────────────────╢
   ║    let (e, r) = q(0);         ║    ║  ʓ(q, n) =                    ║
   ║    q ? n ? λ_·(e, ȶ(r, n−1))  ║    ║    let (_, r) = q(0);         ║
   ║      : 0 : 0                  ║    ║    q ? n ? ʓ(r, n−1) : q : 0  ║
   ╚═══════════════════════════════╝    ╚═══════════════════════════════╝
        ┌────────────┬───────────┐      ┌───────────────────────────────┐
      ┌─┴─╖          │  ╓───╖    │      │       ┌─┬──────────┐          │
    ┌─┤   ╟─────┐    └──╢ ȶ ╟──┐ │      │       └─┘ ┌───╖  ┌─┴─╖  ╔═══╗ │
    │ └─┬─╜   ┌─┴─╖     ╙───╜  │ │      │   ┌───────┤ ʓ ╟──┤   ╟──╢ 0 ║ │
    │   └─────┤ · ╟────┐       │ │      │  ┌┴┐      ╘═╤═╝  └─┬─╜  ╚═══╝ │
    │         ╘═╤═╝    │       │ │      │  └┬┘      ┌─┴─╖    │    ╓───╖ │
    │   ┌───┐ ┌─┴─╖  ╔═╧═╕     │ │      │ ┌─┴─╖ ┌───┤ · ╟─┐  ├────╢ ʓ ╟─┘
    │  ┌┴┐  │ │ ȶ ╟──╢   ├─┬─┐ │ │      │ │ ♯ ║ │   ╘═╤═╝ │  │    ╙───╜
    │  └┬┘  │ ╘═╤═╝  ╚═╤═╛ └─┘ │ │      │ ╘═╤═╝ │   ┌─┴─╖ │  │
    │ ┌─┴─╖ └───┘    ┌─┴─╖     │ │      │  ┌┴┐  │ ┌─┤ ? ╟─┘  │
    │ │ ♯ ║ ┌────────┤ · ╟───┐ │ │      │  └┬┘  │ │ ╘═╤═╝    │
    │ ╘═╤═╝ │        ╘═╤═╝   ├─┘ │      └───┤   │ │ ┌─┴─╖    │
    │  ┌┴┐  │        ┌─┴─╖   │   │          └───┘ └─┤ · ╟─┐  │
    │  └┬┘  │   ┌────┤ ? ╟───┘   │                  ╘═╤═╝ ├──┘
    │   └───┘   │    ╘═╤═╝       │           ╔═══╗  ┌─┴─╖ │
    │         ╔═╧═╗  ┌─┴─╖       │           ║ 0 ╟──┤ ? ╟─┘
    └─────────╢ 0 ╟──┤ ? ╟───────┘           ╚═══╝  ╘═╤═╝
              ╚═══╝  ╘═╤═╝                            │
                       │
         ╓───╖                        ╔═══════════════════════════════════╗
     ┌───╢ ʆ ╟───────────┐            ║  string join                      ║
     │   ╙───╜    ┌──────┴──────┐     ╟───────────────────────────────────╢
     │          ┌─┴─╖  ┌───╖  ┌─┴─╖   ║  Concatenates a lazy sequence     ║
     │     ┌────┤ · ╟──┤ ‼ ╟──┤ ‼ ║   ║  of strings into a single string  ║
     │   ┌─┴─╖  ╘═╤═╝  ╘═╤═╝  ╘═╤═╝   ║  using the provided separator     ║
     │ ┌─┤ ʆ ╟────┘    ┌─┴─╖    │     ╟───────────────────────────────────╢
     │ │ ╘═══╝       ┌─┤ · ╟────┘     ║  ʆ(q, s) =                        ║
     │ │             │ ╘═╤═╝          ║    let (e, r) = q(0);             ║
     │ │   ┌─────────┤ ┌─┴─╖          ║    q ? r ? e ‼ s ‼ ʆ(r, s)        ║
     │ │   │         └─┤ ? ╟─────┐    ║          : e : 0                  ║
     │ │   │           ╘═╤═╝     │    ╚═══════════════════════════════════╝
     │ │ ┌─┴─╖  ╔═══╗  ┌─┴─╖     │
     │ ├─┤   ╟──╢ 0 ╟──┤ ? ╟─┐ ┌─┴─╖
     │ │ └─┬─╜  ╚═══╝  ╘═╤═╝ ├─┤ · ╟─┐
     │ │   └─────────────────┘ ╘═╤═╝ │                   ╓───╖
     │ └─────────────────────────┘   │                   ║ ɕ ║
     └───────────────────────────────┘                   ╙─┬─╜
                                                   ┌───────┴───────┐
          ╔══════════════════════════════════╗     │   ┌──────┐    │
          ║  count                           ║     │   │    ┌─┴─╖  │
          ╟──────────────────────────────────╢     │   │ ┌┐ │ ɕ ║  │
          ║  Returns the number of elements  ║     │   │ └┤ ╘═╤═╝  │
          ║  in a finite lazy sequence       ║     │ ┌─┴─╖│ ┌─┴─╖  │
          ╟──────────────────────────────────╢     └─┤   ╟┘ │ ♯ ║  │
          ║  ɕ(q) = let (_, r) = q(0);       ║       └─┬─╜  ╘═╤═╝  │
          ║         q ? ♯(ɕ(r)) : 0          ║       ╔═╧═╗  ┌─┴─╖  │
          ╚══════════════════════════════════╝       ║ 0 ╟──┤ ? ╟──┘
                                                     ╚═══╝  ╘═╤═╝
                                                              │

