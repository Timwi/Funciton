      ╔══════════════════════════╗       ╔════════════════════════╗
      ║  convert lazy to list    ║       ║  convert list to lazy  ║          ╓───╖
      ╟──────────────────────────╢       ╟────────────────────────╢      ┌───╢ ʝ ╟───────────┐
      ║  Converts a finite lazy  ║       ║  Converts a list to a  ║      │   ╙───╜    ┌──────┴──────┐       ╔═══════════════════════════════════╗
      ║  sequence to a list      ║       ║  lazy sequence         ║      │          ┌─┴─╖  ┌───╖  ┌─┴─╖     ║  string join (lazy sequence)      ║
      ╟──────────────────────────╢       ╟────────────────────────╢      │     ┌────┤ · ╟──┤ ‼ ╟──┤ ‼ ║     ╟───────────────────────────────────╢
      ║  ⌠(q) =                  ║       ║  ⌡(l) =                ║      │   ┌─┴─╖  ╘═╤═╝  ╘═╤═╝  ╘═╤═╝     ║  Concatenates a lazy sequence     ║
      ║    let (e, r) = q(0);    ║       ║    let (h, t) = ‹(l);  ║      │ ┌─┤ ʝ ╟────┘    ┌─┴─╖    │       ║  of strings into a single string  ║
      ║    q ? ›(⌠(r), e) : 0    ║       ║    l ? •[h, ⌡(t)] : 0  ║      │ │ ╘═══╝       ┌─┤ · ╟────┘       ║  using the provided separator     ║
      ╚══════════════════════════╝       ╚════════════════════════╝      │ │             │ ╘═╤═╝            ╟───────────────────────────────────╢
                     ╓───╖                                ╓───╖          │ │   ┌─────────┤ ┌─┴─╖            ║  ʝ(q, s) =                        ║
                     ║ ⌠ ║                     ┌───┐      ║ ⌡ ║          │ │   │         └─┤ ? ╟─────┐      ║    let (e, r) = q(0);             ║
                     ╙─┬─╜                   ┌─┴─╖ └────┐ ╙─┬─╜          │ │   │           ╘═╤═╝     │      ║    q ? r ? e ‼ s ‼ ʝ(r, s)        ║
            ┌──────────┴───────┐           ┌─┤ ‹ ╟────┐ └───┴─┐          │ │ ┌─┴─╖  ╔═══╗  ┌─┴─╖     │      ║          : e : 0                  ║
          ┌─┴─╖                │           │ ╘═══╝    │       │          │ ├─┤   ╟──╢ 0 ╟──┤ ? ╟─┐ ┌─┴─╖    ╚═══════════════════════════════════╝
       ┌──┤   ╟──────────────┐ │           │ ┌───╖  ╔═╧═╕     │          │ │ └─┬─╜  ╚═══╝  ╘═╤═╝ ├─┤ · ╟─┐
       │  └─┬─╜ ┌───╖  ┌───╖ │ │           └─┤ ⌡ ╟──╢   ├─┬─┐ │          │ │   └─────────────────┘ ╘═╤═╝ │
       │    └───┤ › ╟──┤ ⌠ ╟─┘ │             ╘═══╝  ╚═╤═╛ └─┘ │          │ └─────────────────────────┘   │
       │        ╘═╤═╝  ╘═══╝   │             ╔═══╗  ┌─┴─╖     │          └───────────────────────────────┘
       │ ╔═══╗  ┌─┴─╖          │             ║ 0 ╟──┤ ? ╟─────┘          ┌────────────────────────────────┐
       └─╢ 0 ╟──┤ ? ╟──────────┘             ╚═══╝  ╘═╤═╝                │                       ╓───╖    │
         ╚═══╝  ╘═╤═╝                                 │                  │                 ┌─────╢ ᴊ ╟────┤   ╔══════════════════════════════════╗
                  │                                                      │               ┌─┴─╖   ╙───╜    │   ║  string join (list)              ║
                                                                         │      ┌────────┤ · ╟──────────┐ │   ╟──────────────────────────────────╢
       ╔═════════════════════════════════════╗                           │   ┌──┤  ┌───╖ ╘═╤═╝          │ │   ║  Concatenates a list of strings  ║
       ║  lazy Fibonacci                     ║                           │   │  └──┤ ᴊ ╟───┴────────┐   │ │   ║  into a single string using the  ║
       ╟─────────────────────────────────────╢                           │ ┌─┴─╖   ╘═╤═╝   ┌───╖  ┌─┴─╖ │ │   ║  provided separator              ║
       ║  Returns the Fibonacci sequence as  ║                           └─┤ · ╟───┐ └─────┤ ‼ ╟──┤ ‼ ║ │ │   ╟──────────────────────────────────╢
       ║  an infinite lazy sequence          ║                             ╘═╤═╝ ┌─┴─╖     ╘═╤═╝  ╘═╤═╝ │ │   ║  ᴊ(s, l) =                       ║
       ╟─────────────────────────────────────╢                               └───┤ ‹ ╟─┐   ┌─┴─╖  ┌─┴─╖ │ │   ║    let (h, t) = ‹(l);            ║
       ║  λFibo(•) = λfibo(1, 1)             ║                                   ╘═══╝ │ ┌─┤ ? ╟──┤ · ╟─┘ │   ║    l ? t ? h ‼ s ‼ ᴊ(s, t)       ║
       ║  λfibo(a, b) = •[a, λfibo(b, a+b)]  ║                                     ┌───┴─┘ ╘═╤═╝  ╘═╤═╝   │   ║          : h : 0                 ║
       ╚═════════════════════════════════════╝                                     │ ╔═══╗ ┌─┴─╖  ┌─┴─╖   │   ╚══════════════════════════════════╝
     ╓───────╖                      ╓┬───────╖                                     │ ║ 0 ╟─┤ ? ╟──┤ · ╟───┘
     ║ λFibo ║                   ┌──╫┘ λfibo ╟──┐                                  │ ╚═══╝ ╘═╤═╝  ╘═╤═╝
     ╙───┬───╜  ╔═══╗            │  ╙────────╜  │                                  └────────────────┘
         │  ┌───╢ 1 ╟───┐        │  ┌───╖       │                              ┌─────────┐
         │  │   ╚═══╝   │      ┌─┴──┤ + ╟───────┴───┐                    ┌─────┴───┐     ├─────────────────┐
         │  │ ┌───────╖ │    ╔═╧═╕  ╘═╤═╝ ┌───────╖ │                    │ ╔═══╗ ┌─┴─╖ ┌─┴─╖       ┌─────┐ │
         │  └─┤ λfibo ╟─┘  ┌─╢   ├─┬─┐└───┤ λfibo ╟─┘                    │ ║ 0 ╟─┤ ʃ ╟─┤ ? ╟──┐  ┌─┴─╖   │ │
         │    ╘═══╤═══╝    │ ╚═╤═╛ └─┘    ╘═══╤═══╝                      │ ╚═══╝ ╘═╤═╝ ╘═╤═╝  ├──┤ = ║   │ │  ╔═══════════════════════════════════════╗
         │      ┌─┴─╖  ┌─┐ │   │              │                        ┌─┴─╖   ┌───┘   ┌─┴─╖  │  ╘═╤═╝   │ │  ║  Lazy string split                    ║
         └──────┤ · ╟──┴─┘ └──────────────────┘                    ┌───┤ · ╟───┘   ┌───┤ · ╟──┘  ╔═╧══╗  │ │  ╟───────────────────────────────────────╢
                ╘═╤═╝                                              │   ╘═╤═╝       │   ╘═╤═╝     ║ −1 ║  │ │  ║  ǁ(h, n) =                            ║
                  │                                                │     │ ╔═══╗ ┌─┴─╖ ╔═╧═╕ ┌─┐ ╚════╝  │ │  ║    let p = ʘ(h, n);                   ║
                                                                   │     │ ║ 0 ╟─┤ ? ╟─╢   ├─┴─┘         │ │  ║    let r = ǁ(h >> 21×(p + ℓ(n)), n);  ║
                                                                   │     │ ╚═══╝ ╘═╤═╝ ╚═╤═╛ ┌─────────┐ │ │  ║    let q = p = −1;                    ║
                                                                   │   ┌─┴──╖    ┌─┴─╖   │   │   ╓───╖ │ │ │  ║    •[q ? h : ʃ(h, 0, p),              ║
                                                                   │   │ >> ╟────┤ ǁ ╟─┐     │ ┌─╢ ǁ ╟─┘ │ │  ║      q ? 0 : r]                       ║
                                                               ┌───┤   ╘═╤══╝    ╘═══╝ ├───┐ │ │ ╙───╜   │ │  ╚═══════════════════════════════════════╝
     ┌─────────────────────────────────────────────────┐       │ ┌─┴─╖ ┌─┴─╖ ╔════╗  ┌─┴─╖ ├─┘ └───┐   ┌─┘ │
     │ ┌───╖ ┌───╖                                     │       │ │ + ╟─┤ × ╟─╢ 21 ║  │ ℓ ║ │ ┌───╖ │ ┌─┴─╖ │
   ┌─┴─┤ ℓ ╟─┤ + ╟─────────────────────────┐           │       │ ╘═╤═╝ ╘═══╝ ╚════╝  ╘═╤═╝ └─┤ ʘ ╟─┴─┤ · ╟─┘
   │   ╘═══╝ ╘═╤═╝                       ┌─┴─╖         │       │   └───────────────────┘     ╘═╤═╝   ╘═╤═╝
   │         ┌─┴─╖ ┌────╖ ┌──────────────┤ · ╟───┐     │       └───────────────────────────────┴───────┘
   │         │ × ╟─┤ >> ╟─┴─┐            ╘═╤═╝   │     │
   │         ╘═╤═╝ ╘══╤═╝   │  ┌───╖ ╔═══╗ │     │     ├───────┐
   │         ╔═╧══╗   │     └──┤ › ╟─╢ 0 ║ │   ┌─┴─╖ ┌─┴─╖     │
   │         ║ 21 ║ ┌─┴─╖      ╘═╤═╝ ╚═══╝ ├───┤ · ╟─┤ ʘ ║     │
   │         ╚════╝ │ ꜱ ╟───┐    └┐     ┌──┴─┐ ╘═╤═╝ ╘═╤═╝     │
   │                ╘═╤═╝ ┌─┴─╖ ┌─┴─╖ ┌─┴─╖  │   ├──┬──┘ ╓───╖ │  ╔═════════════════════════════════════╗
   └──────────────────┘   │ › ╟─┤ ? ╟─┤ = ║  │   │  └────╢ ꜱ ╟─┘  ║  List string split                  ║
                          ╘═╤═╝ ╘═╤═╝ ╘═╤═╝  │   │       ╙───╜    ╟─────────────────────────────────────╢
                          ┌─┴─╖   │   ╔═╧══╗ │   │                ║  ꜱ(h, n) =                          ║
                        ┌─┤ ʃ ╟─────┐ ║ −1 ║ │   │                ║    let p = ʘ(h, n);                 ║
                        │ ╘═╤═╝     │ ╚════╝ │   │                ║    let r = h >> 21×(p + ℓ(n));      ║
                        │ ╔═╧═╗     └────────┘   │                ║    p = −1 ? ›(0, h)                 ║
                        │ ║ 0 ║                  │                ║           : ›(ꜱ(r, n), ʃ(h, 0, p))  ║
                        │ ╚═══╝                  │                ╚═════════════════════════════════════╝
                        └────────────────────────┘









